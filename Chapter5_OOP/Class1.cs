using System;

namespace CSharp_ProgramingStudy.Chapter5_OOP
{
    /// <summary>
    /// 클래스 개념
    /// 목표: 클래스를 통해 데이터와 메서드를 하나의 단위로 묶는 객체 지향 프로그래밍의 기본 원리를 이해한다.
    /// </summary>
    public class Class1
    {
        /// <summary>
        /// Car 클래스: 자동차를 나타내는 클래스로, 자동차의 모델명을 저장하고 주행 기능을 제공한다.
        /// 
        /// 클래스(Class)는 객체 지향 프로그래밍(OOP)의 근간을 이루는 구조입니다. 
        /// 클래스는 데이터(속성)와 그 데이터를 조작하는 메서드(함수)를 하나의 단위로 묶어 관리합니다. 
        /// 이러한 방식은 데이터와 기능을 캡슐화하여 프로그램의 구조를 명확하게 하고, 
        /// 코드의 재사용성 및 유지 보수성을 향상시킵니다.
        /// 
        /// 클래스의 구성 요소:
        /// 속성(Properties): 클래스 내부에 정의된 변수로, 객체의 상태를 나타냅니다. 
        /// 예를 들어, Car 클래스에는 model이라는 속성이 있어 자동차의 모델명을 저장할 수 있습니다.
        /// 
        /// 메서드(Methods): 클래스 내부에 정의된 함수로, 객체가 수행할 수 있는 동작을 정의합니다. 
        /// Car 클래스의 Drive 메서드는 자동차가 주행 중임을 콘솔에 출력하는 기능을 수행합니다.
        /// 
        /// 클래스의 장점:
        /// 코드 재사용성(Reusability): 
        /// 한 번 정의된 클래스는 여러 객체를 생성하는 데 반복적으로 사용될 수 있어,
        /// 비슷한 기능을 가진 여러 객체를 쉽게 생성할 수 있습니다.
        /// 
        /// 구조화 및 캡슐화(Encapsulation): 데이터와 해당 데이터를 조작하는 메서드를 하나의 단위로 묶음으로써, 
        /// 코드의 구조를 명확하게 하고, 외부에서 객체의 내부 구현에 직접 접근하는 것을 제한할 수 있습니다.
        /// 
        /// 유지 보수성(Maintainability): 클래스를 통해 구조화된 코드는 수정, 확장 및 유지 보수가 용이합니다. 
        /// 특정 기능의 변경이 필요한 경우, 해당 기능을 담당하는 클래스만 수정하면 되므로, 
        /// 프로그램의 다른 부분에 미치는 영향을 최소화할 수 있습니다.
        /// 
        /// 클래스의 사용:
        /// 클래스의 인스턴스(객체)를 생성하기 위해 new 키워드를 사용합니다. 
        /// 이렇게 생성된 객체는 클래스에 정의된 속성과 메서드를 가지며, 
        /// 각 객체는 독립적인 상태와 행동을 가집니다. 
        /// 객체의 속성과 메서드에 접근하기 위해서는 점(.) 연산자를 사용합니다.
        /// 
        /// 1. 클래스(Class):
        ///    - 클래스는 객체를 생성하기 위한 설계도 또는 청사진입니다.
        ///    - 클래스는 속성(필드)과 메서드로 구성되며, 이들을 통해 객체의 상태와 행동을 정의합니다.
        ///    - 클래스 자체는 실제 데이터를 포함하지 않으며, 데이터와 동작을 정의하는 역할을 합니다.
        ///    - 클래스는 하나의 추상적인 개념으로, 메모리에서 실제로 할당되지 않습니다.
        /// 
        /// 2. 객체(Object):
        ///    - 객체는 클래스의 인스턴스(Instance)이며, 클래스에 정의된 대로 메모리에 실제로 할당되는 실체입니다.
        ///    - 객체는 클래스의 구조와 동작을 따르며, 독립적인 상태와 행동을 가집니다.
        ///    - 객체는 클래스에 정의된 속성과 메서드를 통해 데이터(상태)를 저장하고, 동작을 수행할 수 있습니다.
        ///    - 클래스로부터 객체를 생성하기 위해서는 `new` 키워드를 사용합니다.
        /// 
        /// 3. 클래스와 객체의 관계:
        ///    - 클래스는 객체를 생성하는 틀(청사진)이고, 객체는 그 틀에 따라 만들어진 실제 사례입니다.
        ///    - 여러 객체가 하나의 클래스로부터 생성될 수 있으며, 각각의 객체는 독립적인 상태를 가집니다.
        ///    - 객체는 클래스의 정의를 바탕으로 생성되기 때문에, 객체는 클래스가 정의한 속성과 메서드를 사용할 수 있습니다.
        /// 
        /// 클래스는 프로그램의 설계 단계에서 중요한 역할을 하며, 
        /// 복잡한 문제를 해결하기 위해 시스템을 여러 개의 관리 가능한 단위로 분해하는 데 도움을 줍니다. 
        /// 객체 지향 프로그래밍에서 클래스의 사용은 프로그램을 더욱 유연하고 확장 가능하게 만들며, 
        /// 개발자가 보다 효율적으로 코드를 작성하고 관리할 수 있도록 지원합니다.
        /// 
        /// </summary>
        class Car
        {
            // Car 클래스의 속성: 자동차의 모델명을 저장
            public string model;

            // Car 클래스의 메서드: 자동차가 주행 중임을 콘솔에 출력
            public void Drive()
            {
                Console.WriteLine(model + " is driving.");
            }
        }

        public void Run()
        {
            // Car 클래스의 인스턴스 생성
            Car myCar = new Car();
            // 인스턴스의 속성에 값 할당
            myCar.model = "Toyota";
            // 인스턴스의 메서드 호출
            myCar.Drive();
        }
    }
}
