using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CSharp_ProgramingStudy.Chapter4_DataStructure
{
    /// <summary>
    /// 다차원 배열
    /// 목표: 다차원 배열을 사용하여 행렬 또는 그리드와 같은 데이터를 저장하는 방법을 이해한다.
    /// 
    /// 다차원 배열은 데이터를 행렬(matrix) 또는 그리드(grid)와 같은 형태로 저장할 수 있게 해주는 데이터 구조입니다. 
    /// C#에서 다차원 배열은 주로 2차원 배열이나 3차원 배열 형태로 사용됩니다. 
    /// 다차원 배열을 사용하면 복잡한 데이터 구조를 효과적으로 표현하고 관리할 수 있습니다.
    /// 
    /// 다차원 배열의 선언과 초기화:
    /// 다차원 배열은 아래와 같이 선언할 수 있습니다. 
    /// int[,]는 2차원 정수 배열을 선언하는 방법이며, 
    /// 배열의 각 차원의 크기는 콤마로 구분하여 지정합니다.
    /// 
    /// 다차원 배열의 사용:
    /// 다차원 배열의 각 요소에 접근하려면 인덱스를 사용합니다. 
    /// 인덱스는 0부터 시작하며, 각 차원의 인덱스를 콤마로 구분하여 지정합니다.
    /// 
    /// 다차원 배열의 활용:
    /// 다차원 배열은 다양한 분야에서 활용됩니다. 
    /// 예를 들어, 게임 개발에서는 2차원 배열을 사용하여 게임 맵을 표현하거나, 
    /// 과학 및 공학 계산에서는 2차원 또는 3차원 배열을 사용하여 데이터를 처리합니다. 
    /// 또한, 이미지 처리에서는 픽셀 데이터를 저장하기 위해 다차원 배열을 사용할 수 있습니다.
    /// 
    /// 다차원 배열은 데이터를 구조화하여 저장하고 관리할 수 있게 해주며, 
    /// 복잡한 데이터 관계를 명확하게 표현할 수 있게 합니다.
    /// </summary>
    public class Class3
    {
        public void Run()
        {
            // 2차원 배열 선언 및 초기화
            int[,] matrix = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
            };

            // 특정 요소에 접근하여 출력
            Console.WriteLine("특정 요소 접근: " + matrix[0, 1]); // 출력: 2

            // 2차원 배열의 모든 요소를 순회하여 출력
            Console.WriteLine("2차원 배열 순회:");
            for (int i = 0; i < matrix.GetLength(0); i++) // GetLength(0)는 첫 번째 차원의 크기를 반환
            {
                for (int j = 0; j < matrix.GetLength(1); j++) // GetLength(1)는 두 번째 차원의 크기를 반환
                {
                    Console.Write(matrix[i, j] + " ");
                }
                Console.WriteLine(); // 각 행이 끝날 때마다 줄바꿈
            }
        }
    }
}